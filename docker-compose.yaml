# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
#    - ./analytics-airflow-dags/plugins:/opt/airflow/plugins
#./analytics-airflow-dags/dags:/opt/airflow/dags
# #    - ./analytics-airflow-dags/plugins:/opt/airflow/dags:/opt/airflow/plugins
## analytics-airflow-dags/
---
version: '3'
x-airflow-common:
  &airflow-common
  image: local-airflow
  platform: linux/arm64
  environment:
    &airflow-common-env
    AIRFLOW_VAR_ENVIRONMENT: local-airflow
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__LAZY_LOAD_PLUGINS: 'false'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__CORE__EXPOSE_CONFIG: 'true'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    AIRFLOW__EMAIL__EMAIL_BACKEND: airflow.providers.sendgrid.utils.emailer.send_email
    AIRFLOW__EMAIL__EMAIL_CONN_ID: sendgrid_default
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 30
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    AIRFLOW__SCHEDULER__PARSING_PROCESSES: 4
    AIRFLOW__DEBUG__FAIL_FAST: True
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 300
    SUB_ENVIRONMENT: local
    GCP_PROJECT: ready-de-25
    GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/application_default_credentials.json
    GOOGLE_CLOUD_PROJECT: ready-de-25
  volumes:
    - /Users/megwed./Desktop/airflow_local/dags:/opt/airflow/dags
    - /Users/megwed./.config/gcloud/application_default_credentials.json:/opt/airflow/application_default_credentials.json
    - /Users/megwed./Desktop/Megwed/Data Engineering/Projects/Ready/Projects/HandsOn/Airflow/cloning using command /data-engineering-d25/logs:/opt/airflow/logs
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_MULTIPLE_DATABASES: metastore
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - /Users/megwed./Desktop/airflow_local/init-hive-db.sh:/docker-entrypoint-initdb.d/init-hive-db.sh # Mount the script
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - default          

  redis:
    image: redis:latest
    platform: linux/arm64
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  kafka:
    image: bitnami/kafka:latest
    platform: linux/arm64
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - default

  zookeeper:
    image: bitnami/zookeeper:latest
    platform: linux/arm64
    ports:
      - 2181:2181
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - default

  spark-master:
    image: bitnami/spark:latest
    platform: linux/arm64
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
    ports:
      - 7077:7077
      - 8085:8080
    volumes:
      - /Users/megwed./Desktop/airflow_local/dags/data:/opt/spark-data  
    networks:
      - default
      - spark-hive-network

  spark-worker:
    image: bitnami/spark:latest
    platform: linux/arm64
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
    ports:
      - 8082:8082
    depends_on:
      - spark-master
    networks:
      - default
      - spark-hive-network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 4747:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    

volumes:
  postgres-db-volume:

networks:
  default:
    driver: bridge
